{"ast":null,"code":"var _jsxFileName = \"C:\\\\Spring Boot\\\\workspacebranch\\\\flirdog\\\\src\\\\main\\\\webapp\\\\src\\\\components\\\\TextEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport ReactQuill from \"react-quill\";\n//import \"react-quill/dist/quill.snow.css\";\nimport Quill from \"quill\";\nimport ImageResize from \"@looop/quill-image-resize-module-react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nQuill.register(\"modules/ImageResize\", ImageResize);\nconst TextEditor = ({\n  setContentUseState,\n  name\n}) => {\n  _s();\n  const quillElement = useRef();\n  const onInput = content => {\n    // setContentUseState가 객체인 경우\n    if (typeof setContentUseState === \"object\") {\n      setContentUseState(prev => {\n        return {\n          ...prev,\n          [name]: content\n        };\n      });\n    }\n    // setContentUseState가 배열인 경우\n    else if (Array.isArray(setContentUseState)) {\n      setContentUseState(prev => {\n        return [...prev, content];\n      });\n    }\n    // setContentUseState가 텍스트인 경우\n    else {\n      setContentUseState(content);\n    }\n  };\n\n  //   const imageHandler = () => {\n  //     const input = document.createElement(\"input\");\n  //     input.setAttribute(\"type\", \"file\");\n  //     input.setAttribute(\"accept\", \"image/*\");\n  //     input.click();\n\n  //     input.onchange = async () => {\n  //       const file = input.files[0];\n  //       const formData = new FormData();\n  //       formData.append(\"image\", file);\n\n  //       try {\n  //         // 서버에 이미지 업로드\n  //         const response = await axios.post(\n  //           \"http://localhost:8080/admin/uploadImage\",\n  //           formData,\n  //           {\n  //             headers: {\n  //               \"Content-Type\": \"multipart/form-data\",\n  //             },\n  //           }\n  //         );\n\n  //         // 서버로부터 받은 이미지 URL\n  //         const imageUrl = response.data.imageUrl; // 서버에서 반환하는 이미지 URL\n  //         const editor = quillElement.current.getEditor();\n  //         const range = editor.getSelection();\n  //         editor.insertEmbed(range.index, \"image\", imageUrl);\n  //       } catch (error) {\n  //         console.error(\"이미지 업로드 실패:\", error);\n  //       }\n  //     };\n  //   };\n\n  const modules = {\n    toolbar: {\n      container: [[{\n        header: [1, 2, 3, false]\n      }], [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], [{\n        list: \"ordered\"\n      }, {\n        list: \"bullet\"\n      }, {\n        indent: \"-1\"\n      }, {\n        indent: \"+1\"\n      }],\n      // [\"link\", \"image\"],\n      [\"link\"], [{\n        align: []\n      }, {\n        color: []\n      }, {\n        background: []\n      }], [\"clean\"]]\n      //   handlers: {\n      //     image: imageHandler,\n      //   },\n    },\n    ImageResize: {\n      modules: [\"Resize\"]\n    }\n  };\n  const formats = [\n  // 'font',\n  \"header\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"align\", \"color\", \"background\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      sx: {\n        \"  .ql-editor\": {\n          padding: \"30px\",\n          boxShadow: \"0 0 5px 0 rgba(0, 0, 0, 0.5)\",\n          margin: \"2px\",\n          width: \"100%\",\n          maxHeight: \"75vh\",\n          minHeight: \"75vh\",\n          backgroundColor: \"white\"\n        },\n        \"  .ql-container.ql-snow\": {\n          border: \"none\",\n          display: \"flex\",\n          justifyContent: \"center\"\n        }\n      },\n      ref: quillElement,\n      children: /*#__PURE__*/_jsxDEV(ReactQuill, {\n        className: \"form-control text-editor\",\n        theme: \"snow\",\n        modules: modules,\n        formats: formats,\n        onChange: onInput,\n        style: {\n          width: \"100%\",\n          height: \"300px\"\n        },\n        placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\"\n        //---------------아래 내용에 대해 props를 받아서 처리해야함----------------\n        ,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(TextEditor, \"OAQuLlIj4FMo9ijAClyhvV7IHvs=\");\n_c = TextEditor;\nexport default TextEditor;\nvar _c;\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"names":["React","useRef","useState","ReactQuill","Quill","ImageResize","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","register","TextEditor","setContentUseState","name","_s","quillElement","onInput","content","prev","Array","isArray","modules","toolbar","container","header","list","indent","align","color","background","formats","children","sx","padding","boxShadow","margin","width","maxHeight","minHeight","backgroundColor","border","display","justifyContent","ref","className","theme","onChange","style","height","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Spring Boot/workspacebranch/flirdog/src/main/webapp/src/components/TextEditor.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport ReactQuill from \"react-quill\";\r\n//import \"react-quill/dist/quill.snow.css\";\r\nimport Quill from \"quill\";\r\nimport ImageResize from \"@looop/quill-image-resize-module-react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nQuill.register(\"modules/ImageResize\", ImageResize);\r\n\r\nconst TextEditor = ({ setContentUseState, name }) => {\r\n  const quillElement = useRef();\r\n  const onInput = (content) => {\r\n    // setContentUseState가 객체인 경우\r\n    if (typeof setContentUseState === \"object\") {\r\n      setContentUseState((prev) => {\r\n        return { ...prev, [name]: content };\r\n      });\r\n    }\r\n    // setContentUseState가 배열인 경우\r\n    else if (Array.isArray(setContentUseState)) {\r\n      setContentUseState((prev) => {\r\n        return [...prev, content];\r\n      });\r\n    }\r\n    // setContentUseState가 텍스트인 경우\r\n    else {\r\n      setContentUseState(content);\r\n    }\r\n  };\r\n\r\n  //   const imageHandler = () => {\r\n  //     const input = document.createElement(\"input\");\r\n  //     input.setAttribute(\"type\", \"file\");\r\n  //     input.setAttribute(\"accept\", \"image/*\");\r\n  //     input.click();\r\n\r\n  //     input.onchange = async () => {\r\n  //       const file = input.files[0];\r\n  //       const formData = new FormData();\r\n  //       formData.append(\"image\", file);\r\n\r\n  //       try {\r\n  //         // 서버에 이미지 업로드\r\n  //         const response = await axios.post(\r\n  //           \"http://localhost:8080/admin/uploadImage\",\r\n  //           formData,\r\n  //           {\r\n  //             headers: {\r\n  //               \"Content-Type\": \"multipart/form-data\",\r\n  //             },\r\n  //           }\r\n  //         );\r\n\r\n  //         // 서버로부터 받은 이미지 URL\r\n  //         const imageUrl = response.data.imageUrl; // 서버에서 반환하는 이미지 URL\r\n  //         const editor = quillElement.current.getEditor();\r\n  //         const range = editor.getSelection();\r\n  //         editor.insertEmbed(range.index, \"image\", imageUrl);\r\n  //       } catch (error) {\r\n  //         console.error(\"이미지 업로드 실패:\", error);\r\n  //       }\r\n  //     };\r\n  //   };\r\n\r\n  const modules = {\r\n    toolbar: {\r\n      container: [\r\n        [{ header: [1, 2, 3, false] }],\r\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n        [\r\n          { list: \"ordered\" },\r\n          { list: \"bullet\" },\r\n          { indent: \"-1\" },\r\n          { indent: \"+1\" },\r\n        ],\r\n        // [\"link\", \"image\"],\r\n        [\"link\"],\r\n        [{ align: [] }, { color: [] }, { background: [] }],\r\n        [\"clean\"],\r\n      ],\r\n      //   handlers: {\r\n      //     image: imageHandler,\r\n      //   },\r\n    },\r\n    ImageResize: { modules: [\"Resize\"] },\r\n  };\r\n\r\n  const formats = [\r\n    // 'font',\r\n    \"header\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"blockquote\",\r\n    \"list\",\r\n    \"bullet\",\r\n    \"indent\",\r\n    \"link\",\r\n    \"image\",\r\n    \"align\",\r\n    \"color\",\r\n    \"background\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        sx={{\r\n          \"  .ql-editor\": {\r\n            padding: \"30px\",\r\n            boxShadow: \"0 0 5px 0 rgba(0, 0, 0, 0.5)\",\r\n            margin: \"2px\",\r\n            width: \"100%\",\r\n            maxHeight: \"75vh\",\r\n            minHeight: \"75vh\",\r\n            backgroundColor: \"white\",\r\n          },\r\n          \"  .ql-container.ql-snow\": {\r\n            border: \"none\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          },\r\n        }}\r\n        ref={quillElement}\r\n      >\r\n        <ReactQuill\r\n          className=\"form-control text-editor\"\r\n          theme=\"snow\"\r\n          modules={modules}\r\n          formats={formats}\r\n          onChange={onInput}\r\n          style={{ width: \"100%\", height: \"300px\" }}\r\n          placeholder=\"내용을 입력하세요.\"\r\n          //---------------아래 내용에 대해 props를 받아서 처리해야함----------------\r\n          name={name}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextEditor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}