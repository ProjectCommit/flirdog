{"ast":null,"code":"var _jsxFileName = \"C:\\\\Spring Boot\\\\workspacebranch\\\\flirdog\\\\src\\\\main\\\\webapp\\\\src\\\\components\\\\login\\\\loginAPI\\\\SocialKaKao.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport KakaoLogin from \"react-kakao-login\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SocialKakao = () => {\n  _s();\n  const [user, setUser] = useState({});\n  const navigate = useNavigate();\n\n  // setUser 함수의 타입을 로그로 확인\n  console.log(\"setUser type:\", typeof setUser);\n  const kakaoClientId = \"5ef65674b926693e29d5904e2c2d93db\";\n  const kakaoOnSuccess = async data => {\n    const accessToken = data.response.access_token;\n    try {\n      const response = await axios.post(\"http://localhost:8080/access/kakaoAuth\", {\n        token: accessToken\n      });\n      console.log(\"Response from backend\", response.data);\n      if (typeof setUser === \"function\") {\n        setUser(response.data); // UserContext의 setUser 함수를 사용하여 상태 업데이트\n      } else {\n        console.error(\"setUser is not a function\");\n      }\n      console.log(\"localStorage\");\n      console.log(response.data);\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n      localStorage.setItem(\"address\", JSON.stringify(response.data.address));\n\n      //저장되고나면 순서에 따라 홈으로 이동\n      navigate(\"/\");\n    } catch (error) {\n      console.error(\"Error during token transmission:\", error);\n    }\n  };\n  const kakaoOnFailure = error => {\n    console.log(error);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(KakaoLogin, {\n      token: kakaoClientId,\n      onSuccess: kakaoOnSuccess,\n      onFail: kakaoOnFailure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(SocialKakao, \"MD/oMsnVil85mFqWp/TQ3dRxU5Y=\", false, function () {\n  return [useNavigate];\n});\n_c = SocialKakao;\nexport default SocialKakao;\nvar _c;\n$RefreshReg$(_c, \"SocialKakao\");","map":{"version":3,"names":["React","useState","KakaoLogin","axios","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","SocialKakao","_s","user","setUser","navigate","console","log","kakaoClientId","kakaoOnSuccess","data","accessToken","response","access_token","post","token","error","localStorage","setItem","JSON","stringify","address","kakaoOnFailure","children","onSuccess","onFail","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Spring Boot/workspacebranch/flirdog/src/main/webapp/src/components/login/loginAPI/SocialKaKao.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport KakaoLogin from \"react-kakao-login\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst SocialKakao = () => {\r\n  const [user, setUser] = useState({});\r\n  const navigate = useNavigate();\r\n\r\n  // setUser 함수의 타입을 로그로 확인\r\n  console.log(\"setUser type:\", typeof setUser);\r\n\r\n  const kakaoClientId = \"5ef65674b926693e29d5904e2c2d93db\";\r\n\r\n  const kakaoOnSuccess = async (data) => {\r\n    const accessToken = data.response.access_token;\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:8080/access/kakaoAuth\",\r\n        {\r\n          token: accessToken,\r\n        }\r\n      );\r\n      console.log(\"Response from backend\", response.data);\r\n      if (typeof setUser === \"function\") {\r\n        setUser(response.data); // UserContext의 setUser 함수를 사용하여 상태 업데이트\r\n      } else {\r\n        console.error(\"setUser is not a function\");\r\n      }\r\n      console.log(\"localStorage\");\r\n      console.log(response.data);\r\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\r\n      localStorage.setItem(\"address\", JSON.stringify(response.data.address));\r\n\r\n      //저장되고나면 순서에 따라 홈으로 이동\r\n      navigate(\"/\");\r\n    } catch (error) {\r\n      console.error(\"Error during token transmission:\", error);\r\n    }\r\n  };\r\n\r\n  const kakaoOnFailure = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <KakaoLogin\r\n        token={kakaoClientId}\r\n        onSuccess={kakaoOnSuccess}\r\n        onFail={kakaoOnFailure}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SocialKakao;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMY,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACAU,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,OAAOH,OAAO,CAAC;EAE5C,MAAMI,aAAa,GAAG,kCAAkC;EAExD,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;IACrC,MAAMC,WAAW,GAAGD,IAAI,CAACE,QAAQ,CAACC,YAAY;IAC9C,IAAI;MACF,MAAMD,QAAQ,GAAG,MAAMjB,KAAK,CAACmB,IAAI,CAC/B,wCAAwC,EACxC;QACEC,KAAK,EAAEJ;MACT,CACF,CAAC;MACDL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEK,QAAQ,CAACF,IAAI,CAAC;MACnD,IAAI,OAAON,OAAO,KAAK,UAAU,EAAE;QACjCA,OAAO,CAACQ,QAAQ,CAACF,IAAI,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLJ,OAAO,CAACU,KAAK,CAAC,2BAA2B,CAAC;MAC5C;MACAV,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BD,OAAO,CAACC,GAAG,CAACK,QAAQ,CAACF,IAAI,CAAC;MAC1BO,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACF,IAAI,CAACP,IAAI,CAAC,CAAC;MAChEc,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACF,IAAI,CAACW,OAAO,CAAC,CAAC;;MAEtE;MACAhB,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAED,MAAMM,cAAc,GAAIN,KAAK,IAAK;IAChCV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACpB,CAAC;EAED,oBACElB,OAAA,CAAAE,SAAA;IAAAuB,QAAA,eACEzB,OAAA,CAACJ,UAAU;MACTqB,KAAK,EAAEP,aAAc;MACrBgB,SAAS,EAAEf,cAAe;MAC1BgB,MAAM,EAAEH;IAAe;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EAAC,gBACF,CAAC;AAEP,CAAC;AAAC3B,EAAA,CAjDID,WAAW;EAAA,QAEEL,WAAW;AAAA;AAAAkC,EAAA,GAFxB7B,WAAW;AAmDjB,eAAeA,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}