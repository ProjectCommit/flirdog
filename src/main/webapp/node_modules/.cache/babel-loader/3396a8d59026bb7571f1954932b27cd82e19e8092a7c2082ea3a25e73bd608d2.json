{"ast":null,"code":"var _jsxFileName = \"C:\\\\Spring Boot\\\\workspacebranch\\\\flirdog\\\\src\\\\main\\\\webapp\\\\src\\\\components\\\\message\\\\MessageRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport ImageAndTextInput from './ImageAndTextInput';\nimport MessageList from './MessageList';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageRoom = ({\n  userId,\n  nickName,\n  topic,\n  roomNo,\n  profileImage\n}) => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null);\n  const url = 'http://localhost:8080/ws';\n  const messagesContainerRef = useRef(null);\n  useEffect(() => {\n    axios.get('/api/messages', {\n      params: {\n        roomNo\n      }\n    }).then(response => {\n      setMessages(response.data.messages);\n    }).catch(error => {\n      console.error('Failed to load messages:', error);\n    });\n  }, [roomNo]);\n  const scrollToBottom = () => {\n    var _messagesContainerRef, _messagesContainerRef2, _messagesContainerRef3;\n    const scrollHeight = (_messagesContainerRef = messagesContainerRef.current) === null || _messagesContainerRef === void 0 ? void 0 : _messagesContainerRef.scrollHeight;\n    const height = (_messagesContainerRef2 = messagesContainerRef.current) === null || _messagesContainerRef2 === void 0 ? void 0 : _messagesContainerRef2.clientHeight;\n    const maxScrollTop = scrollHeight - height;\n    (_messagesContainerRef3 = messagesContainerRef.current) === null || _messagesContainerRef3 === void 0 ? void 0 : _messagesContainerRef3.scrollTo({\n      top: maxScrollTop,\n      behavior: 'smooth'\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  useEffect(() => {\n    if (stompClient) {\n      return;\n    }\n    const sock = new SockJS(url);\n    const stomp = new Client({\n      webSocketFactory: () => sock,\n      brokerURL: url,\n      connectHeaders: {\n        userId: userId.toString()\n      },\n      debug: str => {\n        console.log(str);\n      }\n    });\n    stomp.onConnect = () => {\n      console.log('Connected to WebSocket');\n      setStompClient(stomp);\n      stomp.subscribe(`/sub/${topic}`, message => {\n        const newMessage = JSON.parse(message.body);\n        setMessages(prevMessages => [...prevMessages, newMessage]);\n      });\n    };\n    stomp.activate();\n    return () => {\n      if (stomp) {\n        stomp.deactivate();\n      }\n    };\n  }, [topic, userId, url]);\n  const handleImageUpload = imageFile => {\n    setSelectedImage(imageFile);\n    axios.get('', {});\n  };\n  const sendMessage = () => {\n    if (stompClient && (messageInput || selectedImage)) {\n      let message;\n      if (selectedImage) {\n        // TODO: 이미지를 서버로 업로드하는 로직 구현\n        message = {\n          roomNo,\n          userId,\n          nickName,\n          messageType: 1,\n          content: selectedImage.name,\n          // or the URL returned after uploading the image\n          profileImage: profileImage // Add your own logic to include the profile image\n        };\n      } else {\n        message = {\n          roomNo,\n          userId,\n          nickName,\n          messageType: 0,\n          content: messageInput,\n          profileImage: profileImage // Add your own logic to include the profile image\n        };\n      }\n      stompClient.publish({\n        destination: `/pub/${topic}`,\n        body: JSON.stringify(message)\n      });\n      setMessageInput('');\n      setSelectedImage(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      height: '100%',\n      backgroundColor: '#F0F0F0'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesContainerRef,\n      style: {\n        height: 'calc(100% - 50px)',\n        overflowY: 'auto',\n        padding: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages,\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ImageAndTextInput, {\n        messageInput: messageInput,\n        onTextChange: setMessageInput,\n        onImageUpload: handleImageUpload,\n        onSendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageRoom, \"cAdxU7cd8OwnLZ9Wy8aadr/+lp0=\");\n_c = MessageRoom;\nexport default MessageRoom;\nvar _c;\n$RefreshReg$(_c, \"MessageRoom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Client","SockJS","ImageAndTextInput","MessageList","axios","jsxDEV","_jsxDEV","MessageRoom","userId","nickName","topic","roomNo","profileImage","_s","stompClient","setStompClient","messages","setMessages","messageInput","setMessageInput","selectedImage","setSelectedImage","url","messagesContainerRef","get","params","then","response","data","catch","error","console","scrollToBottom","_messagesContainerRef","_messagesContainerRef2","_messagesContainerRef3","scrollHeight","current","height","clientHeight","maxScrollTop","scrollTo","top","behavior","sock","stomp","webSocketFactory","brokerURL","connectHeaders","toString","debug","str","log","onConnect","subscribe","message","newMessage","JSON","parse","body","prevMessages","activate","deactivate","handleImageUpload","imageFile","sendMessage","messageType","content","name","publish","destination","stringify","style","position","backgroundColor","children","ref","overflowY","padding","fileName","_jsxFileName","lineNumber","columnNumber","bottom","left","width","onTextChange","onImageUpload","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Spring Boot/workspacebranch/flirdog/src/main/webapp/src/components/message/MessageRoom.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Client } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport ImageAndTextInput from './ImageAndTextInput';\r\nimport MessageList from './MessageList';\r\nimport axios from 'axios';\r\n\r\ntype Message = {\r\n    roomNo: number;\r\n    userId: number;\r\n    nickName: string;\r\n    messageType: number; // 0: 텍스트, 1: 이미지\r\n    content: string;\r\n    profileImage: string;\r\n};\r\n\r\ntype Props = {\r\n    userId: number;\r\n    nickName: string;\r\n    profileImage: string;\r\n    topic: string;\r\n    roomNo: number;\r\n};\r\n\r\nconst MessageRoom: React.FC<Props> = ({ userId, nickName, topic, roomNo, profileImage }) => {\r\n    const [stompClient, setStompClient] = useState<Client | null>(null);\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [messageInput, setMessageInput] = useState<string>('');\r\n    const [selectedImage, setSelectedImage] = useState<File | null>(null);\r\n    const url = 'http://localhost:8080/ws';\r\n    const messagesContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        axios.get('/api/messages', { params: { roomNo } })\r\n            .then(response => {\r\n                setMessages(response.data.messages);\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to load messages:', error);\r\n            });\r\n    }, [roomNo]);\r\n\r\n    const scrollToBottom = () => {\r\n        const scrollHeight = messagesContainerRef.current?.scrollHeight;\r\n        const height = messagesContainerRef.current?.clientHeight;\r\n        const maxScrollTop = scrollHeight! - height!;\r\n        messagesContainerRef.current?.scrollTo({ top: maxScrollTop, behavior: 'smooth' });\r\n    };\r\n\r\n    useEffect(scrollToBottom, [messages]);\r\n\r\n    useEffect(() => {\r\n        if (stompClient) {\r\n            return;\r\n        }\r\n\r\n        const sock = new SockJS(url);\r\n        const stomp = new Client({\r\n            webSocketFactory: () => sock,\r\n            brokerURL: url,\r\n            connectHeaders: {\r\n                userId: userId.toString()\r\n            },\r\n            debug: (str) => {\r\n                console.log(str);\r\n            },\r\n        });\r\n\r\n        stomp.onConnect = () => {\r\n            console.log('Connected to WebSocket');\r\n            setStompClient(stomp);\r\n\r\n            stomp.subscribe(`/sub/${topic}`, (message) => {\r\n                const newMessage: Message = JSON.parse(message.body);\r\n                setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n            });\r\n        };\r\n\r\n        stomp.activate();\r\n\r\n        return () => {\r\n            if (stomp) {\r\n                stomp.deactivate();\r\n            }\r\n        };\r\n    }, [topic, userId, url]);\r\n\r\n    const handleImageUpload = (imageFile: File) => {\r\n        setSelectedImage(imageFile);\r\n        axios.get('', {})\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (stompClient && (messageInput || selectedImage)) {\r\n            let message: Message;\r\n            if (selectedImage) {\r\n                // TODO: 이미지를 서버로 업로드하는 로직 구현\r\n                message = {\r\n                    roomNo,\r\n                    userId,\r\n                    nickName,\r\n                    messageType: 1,\r\n                    content: selectedImage.name, // or the URL returned after uploading the image\r\n                    profileImage: profileImage, // Add your own logic to include the profile image\r\n                };\r\n            } else {\r\n                message = {\r\n                    roomNo,\r\n                    userId,\r\n                    nickName,\r\n                    messageType: 0,\r\n                    content: messageInput,\r\n                    profileImage: profileImage, // Add your own logic to include the profile image\r\n                };\r\n            }\r\n            stompClient.publish({ destination: `/pub/${topic}`, body: JSON.stringify(message) });\r\n            setMessageInput('');\r\n            setSelectedImage(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ position: 'relative', height: '100%', backgroundColor: '#F0F0F0' }}>\r\n            <div ref={messagesContainerRef} style={{ height: 'calc(100% - 50px)', overflowY: 'auto', padding: '10px' }}>\r\n                <MessageList messages={messages} userId={userId} />\r\n            </div>\r\n            <div style={{ position: 'absolute', bottom: 0, left: 0, width: '100%' }}>\r\n                <ImageAndTextInput\r\n                    messageInput={messageInput}\r\n                    onTextChange={setMessageInput}\r\n                    onImageUpload={handleImageUpload}\r\n                    onSendMessage={sendMessage}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageRoom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}