{"ast":null,"code":"var _jsxFileName = \"C:\\\\Spring Boot\\\\workspacebranch\\\\flirdog\\\\src\\\\main\\\\webapp\\\\src\\\\components\\\\login\\\\loginAPI\\\\EmailButton.js\",\n  _s = $RefreshSig$();\nimport emailjs from \"emailjs-com\";\nimport { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailButton({\n  email,\n  isValidEmail,\n  setShowAuthKeyInput,\n  setAuthCode,\n  isEmailCheck\n}) {\n  _s();\n  const [isEmailSent, setIsEmailSent] = useState(false);\n  const generateAuthCode = () => {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  };\n  const handleAuthButtonClick = () => {\n    if (isEmailCheck === false) {\n      //swal\n      Swal.fire({\n        title: \"이미 사용중인 이메일입니다.\",\n        icon: \"error\",\n        timer: 700,\n        showConfirmButton: false,\n        position: \"top\"\n      });\n    } else if (isEmailCheck === true) {\n      const newAuthCode = generateAuthCode();\n      setAuthCode(newAuthCode);\n      verifyEmail(newAuthCode);\n      setShowAuthKeyInput(true);\n    }\n  };\n  const verifyEmail = newAuthCode => {\n    if (isValidEmail === true) {\n      const templateParams = {\n        to_email: email,\n        from_name: \"flirdog\",\n        message: \"인증되었습니다.\",\n        auth_code: newAuthCode\n      };\n      emailjs.send(\"flirdogEmail\",\n      // 서비스 ID\n      \"flirdogEmailTemplate\",\n      // 템플릿 ID\n      templateParams, \"kqK_NYaJb3vA1A3eJ\" // public-key\n      ).then(() => {\n        setIsEmailSent(true);\n      }).catch(error => {\n        console.error(\"이메일 보내기 실패:\", error);\n      });\n    } else if (isValidEmail === false) {\n      Swal.fire({\n        title: \"이메일 형식이 올바르지 않습니다.\",\n        text: \"이메일을 확인해주세요.\",\n        icon: \"error\",\n        timer: 700,\n        showConfirmButton: false,\n        position: \"top\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `mt-2 d-flex justify-content-center align-items-center rounded`,\n    style: {\n      width: \"20%\",\n      height: \"47px\",\n      backgroundColor: \"#F56084\",\n      cursor: \"pointer\",\n      fontSize: \"0.9rem\"\n    },\n    onClick: handleAuthButtonClick,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-white\",\n      children: \"\\uC778\\uC99D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailButton, \"51Kfjml4uqDqx/w68caD/CgvBco=\");\n_c = EmailButton;\nexport default EmailButton;\nvar _c;\n$RefreshReg$(_c, \"EmailButton\");","map":{"version":3,"names":["emailjs","useState","Swal","jsxDEV","_jsxDEV","EmailButton","email","isValidEmail","setShowAuthKeyInput","setAuthCode","isEmailCheck","_s","isEmailSent","setIsEmailSent","generateAuthCode","Math","floor","random","toString","handleAuthButtonClick","fire","title","icon","timer","showConfirmButton","position","newAuthCode","verifyEmail","templateParams","to_email","from_name","message","auth_code","send","then","catch","error","console","text","className","style","width","height","backgroundColor","cursor","fontSize","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Spring Boot/workspacebranch/flirdog/src/main/webapp/src/components/login/loginAPI/EmailButton.js"],"sourcesContent":["import emailjs from \"emailjs-com\";\r\nimport { useState } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction EmailButton({\r\n  email,\r\n  isValidEmail,\r\n  setShowAuthKeyInput,\r\n  setAuthCode,\r\n  isEmailCheck,\r\n}) {\r\n  const [isEmailSent, setIsEmailSent] = useState(false);\r\n  const generateAuthCode = () => {\r\n    return Math.floor(100000 + Math.random() * 900000).toString();\r\n  };\r\n\r\n  const handleAuthButtonClick = () => {\r\n    if (isEmailCheck === false) {\r\n      //swal\r\n      Swal.fire({\r\n        title: \"이미 사용중인 이메일입니다.\",\r\n        icon: \"error\",\r\n        timer: 700,\r\n        showConfirmButton: false,\r\n        position: \"top\",\r\n      });\r\n    } else if (isEmailCheck === true) {\r\n      const newAuthCode = generateAuthCode();\r\n      setAuthCode(newAuthCode);\r\n      verifyEmail(newAuthCode);\r\n      setShowAuthKeyInput(true);\r\n    }\r\n  };\r\n\r\n  const verifyEmail = (newAuthCode) => {\r\n    if (isValidEmail === true) {\r\n      const templateParams = {\r\n        to_email: email,\r\n        from_name: \"flirdog\",\r\n        message: \"인증되었습니다.\",\r\n        auth_code: newAuthCode,\r\n      };\r\n      emailjs\r\n        .send(\r\n          \"flirdogEmail\", // 서비스 ID\r\n          \"flirdogEmailTemplate\", // 템플릿 ID\r\n          templateParams,\r\n          \"kqK_NYaJb3vA1A3eJ\" // public-key\r\n        )\r\n        .then(() => {\r\n          setIsEmailSent(true);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"이메일 보내기 실패:\", error);\r\n        });\r\n    } else if (isValidEmail === false) {\r\n      Swal.fire({\r\n        title: \"이메일 형식이 올바르지 않습니다.\",\r\n        text: \"이메일을 확인해주세요.\",\r\n        icon: \"error\",\r\n        timer: 700,\r\n        showConfirmButton: false,\r\n        position: \"top\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`mt-2 d-flex justify-content-center align-items-center rounded`}\r\n      style={{\r\n        width: \"20%\",\r\n        height: \"47px\",\r\n        backgroundColor: \"#F56084\",\r\n        cursor: \"pointer\",\r\n        fontSize: \"0.9rem\",\r\n      }}\r\n      onClick={handleAuthButtonClick}\r\n    >\r\n      <span className=\"text-white\">인증</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmailButton;\r\n"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,aAAa;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,WAAWA,CAAC;EACnBC,KAAK;EACLC,YAAY;EACZC,mBAAmB;EACnBC,WAAW;EACXC;AACF,CAAC,EAAE;EAAAC,EAAA;EACD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMa,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,OAAOC,IAAI,CAACC,KAAK,CAAC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAIT,YAAY,KAAK,KAAK,EAAE;MAC1B;MACAR,IAAI,CAACkB,IAAI,CAAC;QACRC,KAAK,EAAE,iBAAiB;QACxBC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,GAAG;QACVC,iBAAiB,EAAE,KAAK;QACxBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIf,YAAY,KAAK,IAAI,EAAE;MAChC,MAAMgB,WAAW,GAAGZ,gBAAgB,CAAC,CAAC;MACtCL,WAAW,CAACiB,WAAW,CAAC;MACxBC,WAAW,CAACD,WAAW,CAAC;MACxBlB,mBAAmB,CAAC,IAAI,CAAC;IAC3B;EACF,CAAC;EAED,MAAMmB,WAAW,GAAID,WAAW,IAAK;IACnC,IAAInB,YAAY,KAAK,IAAI,EAAE;MACzB,MAAMqB,cAAc,GAAG;QACrBC,QAAQ,EAAEvB,KAAK;QACfwB,SAAS,EAAE,SAAS;QACpBC,OAAO,EAAE,UAAU;QACnBC,SAAS,EAAEN;MACb,CAAC;MACD1B,OAAO,CACJiC,IAAI,CACH,cAAc;MAAE;MAChB,sBAAsB;MAAE;MACxBL,cAAc,EACd,mBAAmB,CAAC;MACtB,CAAC,CACAM,IAAI,CAAC,MAAM;QACVrB,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC,CAAC,CACDsB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACrC,CAAC,CAAC;IACN,CAAC,MAAM,IAAI7B,YAAY,KAAK,KAAK,EAAE;MACjCL,IAAI,CAACkB,IAAI,CAAC;QACRC,KAAK,EAAE,oBAAoB;QAC3BiB,IAAI,EAAE,cAAc;QACpBhB,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,GAAG;QACVC,iBAAiB,EAAE,KAAK;QACxBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACErB,OAAA;IACEmC,SAAS,EAAG,+DAA+D;IAC3EC,KAAK,EAAE;MACLC,KAAK,EAAE,KAAK;MACZC,MAAM,EAAE,MAAM;MACdC,eAAe,EAAE,SAAS;MAC1BC,MAAM,EAAE,SAAS;MACjBC,QAAQ,EAAE;IACZ,CAAE;IACFC,OAAO,EAAE3B,qBAAsB;IAAA4B,QAAA,eAE/B3C,OAAA;MAAMmC,SAAS,EAAC,YAAY;MAAAQ,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV;AAACxC,EAAA,CA9EQN,WAAW;AAAA+C,EAAA,GAAX/C,WAAW;AAgFpB,eAAeA,WAAW;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}